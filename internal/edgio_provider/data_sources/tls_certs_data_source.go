package data_sources

import (
	"context"
	"terraform-provider-edgio/internal/edgio_api"
	"terraform-provider-edgio/internal/edgio_provider/models"
	"terraform-provider-edgio/internal/edgio_provider/utility"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

type TlsCertsDataSource struct {
	client edgio_api.EdgioClientInterface
}

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource = &TlsCertsDataSource{}
)

func NewTlsCertsDataSource(client edgio_api.EdgioClientInterface) *TlsCertsDataSource {
	return &TlsCertsDataSource{
		client: client,
	}
}

func (d *TlsCertsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "edgio_tls_certs"
}

func (d *TlsCertsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: `The environment ID to filter the TLS certificates.`,
			},
			"item_count": schema.Int32Attribute{
				Required:    true,
				Description: `The total number of TLS certificates to load.`,
			},
			"certificates": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"environment_id": schema.StringAttribute{
							Required:    true,
							Description: "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).",
						},
						"primary_cert": schema.StringAttribute{
							Description: "Your TLS certificate. We require this certificate to be issued by a Certificate Authority",
							Computed:    true,
						},
						"intermediate_cert": schema.StringAttribute{
							Description: "The intermediate certificates (IC) used by the CA, including the CAâ€™s signing certificate.",
							Computed:    true,
						},
						"private_key": schema.StringAttribute{
							Computed:    true,
							Description: "The private key that was generated with the CSR.",
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: "The resource's system-defined ID.",
						},
						"expiration": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's expiration date and time (UTC).",
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's status. Possible values: `created`, `activating`, `activated`, `failed`, `expired`.",
						},
						"generated": schema.BoolAttribute{
							Computed:    true,
							Description: "Returns `true` for TLS certificates generated by Edgio, or `false` for uploaded certificates.",
						},
						"serial": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's serial number.",
						},
						"common_name": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's common name (CN).",
						},
						"alternative_names": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
							Description: "The TLS certificate's Subject Alternative Names (SAN).",
						},
						"activation_error": schema.StringAttribute{
							Computed:    true,
							Description: "Contains an error message if the TLS certificate could not be activated.",
						},
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's creation date and time (UTC).",
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: "The TLS certificate's last modification date and time (UTC).",
						},
					},
				},
			},
		},
	}
}

func (d *TlsCertsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var environmentID string
	var item_count int32
	diags := req.Config.GetAttribute(ctx, path.Root("environment_id"), &environmentID)
	resp.Diagnostics.Append(diags...)
	req.Config.GetAttribute(ctx, path.Root("item_count"), &item_count)

	if resp.Diagnostics.HasError() {
		return
	}

	tlsCertsResponse, err := d.client.GetTlsCerts(0, int(item_count), environmentID)
	if err != nil {
		resp.Diagnostics.AddError("Error reading TLS certificates", err.Error())
		return
	}

	state := models.TLSCertsModel{
		EnvironmentID: types.StringValue(environmentID),
		ItemCount:     types.Int32Value(tlsCertsResponse.TotalItems),
		Certificates:  []models.TLSCertModel{},
	}

	for _, cert := range tlsCertsResponse.Certificates {
		certState := utility.ConvertTlsCertsToModel(&cert)
		state.Certificates = append(state.Certificates, certState)
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
