package resources

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"terraform-provider-edgio/internal/edgio_api"
	"terraform-provider-edgio/internal/edgio_api/dtos/tls"
	"terraform-provider-edgio/internal/edgio_provider/models"
)

// Ensure the implementation satisfies the resource.Resource interface
var _ resource.Resource = &TLSCertsResource{}

type TLSCertsResource struct {
	client *edgio_api.EdgioClient
}

func NewTLSCertsResource(client *edgio_api.EdgioClient) *TLSCertsResource {
	return &TLSCertsResource{
		client: client,
	}
}

func (r *TLSCertsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "edgio_tls_cert"
}

func (r *TLSCertsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"environment_id": schema.StringAttribute{
				Required:    true,
				Description: "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).",
			},
			"primary_cert": schema.StringAttribute{
				Optional:    true,
				Description: "Your TLS certificate. We require this certificate to be issued by a Certificate Authority",
			},
			"intermediate_cert": schema.StringAttribute{
				Optional:    true,
				Description: "The intermediate certificates (IC) used by the CA, including the CAâ€™s signing certificate.",
			},
			"private_key": schema.StringAttribute{
				Optional:    true,
				Description: "The private key that was generated with the CSR.",
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The resource's system-defined ID.",
			},
			"expiration": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's expiration date and time (UTC).",
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's status. Possible values: `created`, `activating`, `activated`, `failed`, `expired`.",
			},
			"generated": schema.BoolAttribute{
				Computed:    true,
				Description: "Returns `true` for TLS certificates generated by Edgio, or `false` for uploaded certificates.",
			},
			"serial": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's serial number.",
			},
			"common_name": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's common name (CN).",
			},
			"alternative_names": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
				Description: "The TLS certificate's Subject Alternative Names (SAN).",
			},
			"activation_error": schema.StringAttribute{
				Computed:    true,
				Description: "Contains an error message if the TLS certificate could not be activated.",
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's creation date and time (UTC).",
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: "The TLS certificate's last modification date and time (UTC).",
			},
		},
	}
}

func (r *TLSCertsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan models.TLSCertModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	primaryCertSet := !plan.PrimaryCert.IsNull()
	intermediateCertSet := !plan.IntermediateCert.IsNull()
	privateKeySet := !plan.PrivateKey.IsNull()

	if (primaryCertSet || intermediateCertSet || privateKeySet) && !(primaryCertSet && intermediateCertSet && privateKeySet) {
		resp.Diagnostics.AddError(
			"Invalid Certificate Input",
			"If you provide one of 'primary_cert', 'intermediate_cert', or 'private_key', you must provide all three.",
		)
		return
	}

	tlsRes := tls.TLSCertResponse{}

	if !primaryCertSet && !intermediateCertSet && !privateKeySet {
		res, err := r.client.GenerateTlsCert(plan.EnvironmentID.ValueString())

		if err != nil {
			resp.Diagnostics.AddError("Error Generating TLS Cert", fmt.Sprintf("Error: %s", err.Error()))
			return
		}

		tlsRes = *res
	} else {
		res, err := r.client.UploadTlsCert(tls.UploadTlsCertRequest{
			EnvironmentID:    plan.EnvironmentID.ValueString(),
			PrimaryCert:      plan.PrimaryCert.ValueString(),
			IntermediateCert: plan.IntermediateCert.ValueString(),
			PrivateKey:       plan.PrivateKey.ValueString(),
		})

		if err != nil {
			resp.Diagnostics.AddError("Error Uploading TLS Cert", fmt.Sprintf("Error: %s", err.Error()))
			return
		}

		tlsRes = *res
	}

	plan = models.TLSCertModel{
		ID:               types.StringValue(tlsRes.ID),
		EnvironmentID:    types.StringValue(tlsRes.EnvironmentID),
		PrimaryCert:      types.StringValue(tlsRes.PrimaryCert),
		IntermediateCert: types.StringValue(tlsRes.IntermediateCert),
		Expiration:       types.StringValue(tlsRes.Expiration),
		Status:           types.StringValue(tlsRes.Status),
		Generated:        types.BoolValue(tlsRes.Generated),
		Serial:           types.StringValue(tlsRes.Serial),
		CommonName:       types.StringValue(tlsRes.CommonName),
		AlternativeNames: convertToList(tlsRes.AlternativeNames),
		ActivationError:  types.StringValue(tlsRes.ActivationError),
		CreatedAt:        types.StringValue(tlsRes.CreatedAt),
		UpdatedAt:        types.StringValue(tlsRes.UpdatedAt),
	}

	// Set the state (e.g., after generating or uploading the certificate)
	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *TLSCertsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state models.TLSCertModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tlsCertResponse, err := r.client.GetTlsCert(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error Fetching TLS Cert", fmt.Sprintf("Error: %s", err.Error()))
		return
	}

	// Update state with the fetched data
	state = models.TLSCertModel{
		ID:               types.StringValue(tlsCertResponse.ID),
		EnvironmentID:    types.StringValue(tlsCertResponse.EnvironmentID),
		PrimaryCert:      types.StringValue(tlsCertResponse.PrimaryCert),
		IntermediateCert: types.StringValue(tlsCertResponse.IntermediateCert),
		Expiration:       types.StringValue(tlsCertResponse.Expiration),
		Status:           types.StringValue(tlsCertResponse.Status),
		Generated:        types.BoolValue(tlsCertResponse.Generated),
		Serial:           types.StringValue(tlsCertResponse.Serial),
		CommonName:       types.StringValue(tlsCertResponse.CommonName),
		AlternativeNames: convertToList(tlsCertResponse.AlternativeNames),
		ActivationError:  types.StringValue(tlsCertResponse.ActivationError),
		CreatedAt:        types.StringValue(tlsCertResponse.CreatedAt),
		UpdatedAt:        types.StringValue(tlsCertResponse.UpdatedAt),
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *TLSCertsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	resp.Diagnostics.AddError("Error Updating Purge Cache", "Purge Cache cannot be updated")
}

func (r *TLSCertsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	resp.Diagnostics.AddError("Error Deleting Purge Cache", "Purge Cache cannot be deleted")
}

func convertToList(slice []string) types.List {
	elements := make([]attr.Value, len(slice))
	for i, v := range slice {
		elements[i] = types.StringValue(v)
	}

	list, _ := types.ListValue(types.StringType, elements)
	return list
}
